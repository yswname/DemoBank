<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.com.demo.ssm.bank.mapper.BankTransRecordMapper">
  <resultMap id="BaseResultMap" type="cn.com.demo.ssm.bank.entity.BankTransRecord">
    <id column="trn_id" jdbcType="INTEGER" property="trnId" />
    <result column="acc_code" jdbcType="VARCHAR" property="accCode" />
    <result column="bnk_acc_code" jdbcType="VARCHAR" property="bnkAccCode" />
    <result column="trn_time" jdbcType="TIMESTAMP" property="trnTime" />
    <result column="trn_money" jdbcType="DECIMAL" property="trnMoney" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    trn_id, acc_code, bnk_acc_code, trn_time, trn_money
  </sql>
  <select id="selectByExample" parameterType="cn.com.demo.ssm.bank.entity.BankTransRecordExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from bnk_trans_record
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from bnk_trans_record
    where trn_id = #{trnId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from bnk_trans_record
    where trn_id = #{trnId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="cn.com.demo.ssm.bank.entity.BankTransRecordExample">
    delete from bnk_trans_record
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.com.demo.ssm.bank.entity.BankTransRecord">
    insert into bnk_trans_record (trn_id, acc_code, bnk_acc_code, 
      trn_time, trn_money)
    values (#{trnId,jdbcType=INTEGER}, #{accCode,jdbcType=VARCHAR}, #{bnkAccCode,jdbcType=VARCHAR}, 
      #{trnTime,jdbcType=TIMESTAMP}, #{trnMoney,jdbcType=DECIMAL})
  </insert>
  <insert id="insertSelective" parameterType="cn.com.demo.ssm.bank.entity.BankTransRecord">
    insert into bnk_trans_record
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="trnId != null">
        trn_id,
      </if>
      <if test="accCode != null">
        acc_code,
      </if>
      <if test="bnkAccCode != null">
        bnk_acc_code,
      </if>
      <if test="trnTime != null">
        trn_time,
      </if>
      <if test="trnMoney != null">
        trn_money,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="trnId != null">
        #{trnId,jdbcType=INTEGER},
      </if>
      <if test="accCode != null">
        #{accCode,jdbcType=VARCHAR},
      </if>
      <if test="bnkAccCode != null">
        #{bnkAccCode,jdbcType=VARCHAR},
      </if>
      <if test="trnTime != null">
        #{trnTime,jdbcType=TIMESTAMP},
      </if>
      <if test="trnMoney != null">
        #{trnMoney,jdbcType=DECIMAL},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.com.demo.ssm.bank.entity.BankTransRecordExample" resultType="java.lang.Long">
    select count(*) from bnk_trans_record
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update bnk_trans_record
    <set>
      <if test="record.trnId != null">
        trn_id = #{record.trnId,jdbcType=INTEGER},
      </if>
      <if test="record.accCode != null">
        acc_code = #{record.accCode,jdbcType=VARCHAR},
      </if>
      <if test="record.bnkAccCode != null">
        bnk_acc_code = #{record.bnkAccCode,jdbcType=VARCHAR},
      </if>
      <if test="record.trnTime != null">
        trn_time = #{record.trnTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.trnMoney != null">
        trn_money = #{record.trnMoney,jdbcType=DECIMAL},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update bnk_trans_record
    set trn_id = #{record.trnId,jdbcType=INTEGER},
      acc_code = #{record.accCode,jdbcType=VARCHAR},
      bnk_acc_code = #{record.bnkAccCode,jdbcType=VARCHAR},
      trn_time = #{record.trnTime,jdbcType=TIMESTAMP},
      trn_money = #{record.trnMoney,jdbcType=DECIMAL}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.com.demo.ssm.bank.entity.BankTransRecord">
    update bnk_trans_record
    <set>
      <if test="accCode != null">
        acc_code = #{accCode,jdbcType=VARCHAR},
      </if>
      <if test="bnkAccCode != null">
        bnk_acc_code = #{bnkAccCode,jdbcType=VARCHAR},
      </if>
      <if test="trnTime != null">
        trn_time = #{trnTime,jdbcType=TIMESTAMP},
      </if>
      <if test="trnMoney != null">
        trn_money = #{trnMoney,jdbcType=DECIMAL},
      </if>
    </set>
    where trn_id = #{trnId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.com.demo.ssm.bank.entity.BankTransRecord">
    update bnk_trans_record
    set acc_code = #{accCode,jdbcType=VARCHAR},
      bnk_acc_code = #{bnkAccCode,jdbcType=VARCHAR},
      trn_time = #{trnTime,jdbcType=TIMESTAMP},
      trn_money = #{trnMoney,jdbcType=DECIMAL}
    where trn_id = #{trnId,jdbcType=INTEGER}
  </update>
</mapper>